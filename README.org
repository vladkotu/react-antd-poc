
* Proof of qualification repo
    :PROPERTIES:
    :header-args: :var DBPATH="server/src/db"
    :END:
  This project aim to proof knowledge of NodeJs/React stack
** Start Scripts
   See [[file:package.json][server package.json]] and [[file:client/package.json][client package.json]] "scripts" sections for details.


Start local infrastructure 
#+begin_src sh
docker-compose up -d
#+end_src
  
Start dev server and client code watchers 
#+begin_src sh
yarn dev:all
#+end_src

Starts server separately
#+begin_src sh
yarn nodemon
#+end_src

Run test in watch mode
#+begin_src sh
yarn test --watch
#+end_src

Executes server side code watcher in dev mode.
** React(Hooks) front-end
*** TODO [7/9] List:
    1. [X] Use React Hooks for state management
    2. [X] Use [[https://ant.design/components/button/][Ant Design]]  components library
    3. [X] Implement reusable Editable list component for admin dashboard
    4. [ ] Sass styling
    5. [X] Mock api calls while developing
    6. [X] Integrate BE API
    7. [X] Mock api data with faker.js
    8. [X] Unit tests
    9. [ ] Functional(end-to-end) tests with cypress
 
** NodeJs backend
*** TODO [6/8] List
    - [X] CRUD actions
    - [X] ES6 syntax for server side code
    - [X] Request validation/sanitation
      - [X] Single route validation
      - [X] Custom validation middleware
    - [X] Error handling
    - [ ] Unit tests
    - [X] End-to-end API testing
      - [X] Scripts for reseting/seeding database with test data
      - [X] Run docker localstack image before tests
      - [X] Wtite end-to-end tests
    - [X] Migrate app to DynamoDB as main DB
    - [ ] [WAITING] Deploy to AWS lambda (localstack)

*** DynamoDB
**** Create and seed with data tables
***** Accounts table
****** Create accounts table
       Generate json shema for DynamoDB table:
    #+begin_src sh :results output :eval never-export :exports both
      aws dynamodb create-table --generate-cli-skeleton > ./server/db/table-shema-example.json
    #+end_src

    #+NAME: delete-accounts-table
    #+begin_src sh :results silent :eval never-export :exports both
     aws --endpoint-url http://localhost:4569 \
         dynamodb delete-table \
         --table-name Accounts
    #+end_src

    #+NAME: create-table
    #+begin_src sh :results output :wrap json :eval never-export :exports both
     aws --endpoint-url http://localhost:4569 \
         dynamodb create-table \
         --cli-input-json file://${DBPATH}/AccountsSchema.json
    #+end_src

    #+RESULTS: create-table
    #+begin_json
    {
        "TableDescription": {
            "TableArn": "arn:aws:dynamodb:us-east-1:000000000000:table/Accounts", 
            "AttributeDefinitions": [
                {
                    "AttributeName": "id", 
                    "AttributeType": "S"
                }, 
                {
                    "AttributeName": "accType", 
                    "AttributeType": "S"
                }, 
                {
                    "AttributeName": "createdDateTime", 
                    "AttributeType": "N"
                }
            ], 
            "GlobalSecondaryIndexes": [
                {
                    "IndexSizeBytes": 0, 
                    "IndexName": "accType", 
                    "Projection": {
                        "ProjectionType": "ALL"
                    }, 
                    "ProvisionedThroughput": {
                        "WriteCapacityUnits": 1, 
                        "ReadCapacityUnits": 1
                    }, 
                    "IndexStatus": "ACTIVE", 
                    "KeySchema": [
                        {
                            "KeyType": "HASH", 
                            "AttributeName": "accType"
                        }, 
                        {
                            "KeyType": "RANGE", 
                            "AttributeName": "createdDateTime"
                        }
                    ], 
                    "IndexArn": "arn:aws:dynamodb:ddblocal:000000000000:table/Accounts/index/accType", 
                    "ItemCount": 0
                }
            ], 
            "ProvisionedThroughput": {
                "NumberOfDecreasesToday": 0, 
                "WriteCapacityUnits": 1, 
                "LastIncreaseDateTime": 0.0, 
                "ReadCapacityUnits": 1, 
                "LastDecreaseDateTime": 0.0
            }, 
            "TableSizeBytes": 0, 
            "TableName": "Accounts", 
            "BillingModeSummary": {
                "LastUpdateToPayPerRequestDateTime": 0.0, 
                "BillingMode": "PROVISIONED"
            }, 
            "TableStatus": "ACTIVE", 
            "KeySchema": [
                {
                    "KeyType": "HASH", 
                    "AttributeName": "id"
                }, 
                {
                    "KeyType": "RANGE", 
                    "AttributeName": "createdDateTime"
                }
            ], 
            "ItemCount": 0, 
            "CreationDateTime": 1585242674.111
        }
    }
    #+end_json


    #+RESULTS: create-tabl
   #+begin_src sh :results output org :eval never-export :exports both
     aws --endpoint-url http://localhost:4569 \
         dynamodb list-tables
   #+end_src

   #+RESULTS:
   #+begin_src org
   {
       "TableNames": [
           "Accounts"
       ]
   }
   #+end_src
****** Seed accounts with test data

  #NAME: seed-accounts
  #+begin_src sh :results output :eval never-export :exports both
     aws --endpoint-url http://localhost:4569 \
         dynamodb batch-write-item \
         --request-items   \
         file://${DBPATH}/AccountsDataSeed.json
  #+end_src

  #+RESULTS:
  : {
  :     "UnprocessedItems": {}
  : }

  Unfortunately =batch-write-item= limited to 25 operations
****** Quering single item

 #NAME: query-account-by-type
 #+begin_src sh :results output :eval never-export :exports both
   aws --endpoint-url http://localhost:4569 \
     dynamodb query \
     --table-name Accounts \
     --key-condition-expression "id = :id" \
     --expression-attribute-values  '{":id":{"S": "d83ef3c0-6d35-11ea-9d77-3dffd7d18939"}}'
 #+end_src

 #+RESULTS:
 #+begin_example json
 {
     "Count": 1, 
     "Items": [
         {
             "comment": {
                 "S": "Facere deleniti blanditiis eum."
             }, 
             "category": {
                 "S": "Sales"
             }, 
             "createdDateTime": {
                 "N": "1446960934025"
             }, 
             "accType": {
                 "S": "default"
             }, 
             "vatPercent": {
                 "N": "49"
             }, 
             "accName": {
                 "S": "Roi Greens Backing Up"
             }, 
             "vatCategoryS": {
                 "S": "S"
             }, 
             "id": {
                 "S": "d83ef3c0-6d35-11ea-9d77-3dffd7d18939"
             }, 
             "accNo": {
                 "N": "55"
             }
         }
     ], 
     "ScannedCount": 1, 
     "ConsumedCapacity": null
 }
 #+end_example
****** Querying accounts from GSI
 #NAME: query-account-by-type
 #+begin_src sh :results output :eval never-export :exports both
     aws --endpoint-url http://localhost:4569 \
         dynamodb query \
        --table-name Accounts \
        --index-name accType \
        --key-condition-expression "accType = :accType" \
        --expression-attribute-values  '{":accType":{"S":"bookkeeping"}}'
 #+end_src

 #+RESULTS:
 #+begin_example
 {
     "Count": 3, 
     "Items": [
         {
             "comment": {
                 "S": "est autem facere"
             }, 
             "category": {
                 "S": "Purchase"
             }, 
             "createdDateTime": {
                 "N": "1329262892304"
             }, 
             "accType": {
                 "S": "bookkeeping"
             }, 
             "vatPercent": {
                 "N": "73"
             }, 
             "accName": {
                 "S": "Agp"
             }, 
             "vatCategoryS": {
                 "S": "P"
             }, 
             "id": {
                 "S": "d83fde20-6d35-11ea-9d77-3dffd7d18939"
             }, 
             "accNo": {
                 "N": "93"
             }
         }, 
         {
             "comment": {
                 "S": "Amet consequatur similique quis nobis nam maxime ut dolor. Vitae sed quo sunt molestias vero tempore minima. Necessitatibus ducimus hic reprehenderit. Hic dolore error animi ut aperiam. Hic inventore sunt ipsa ut recusandae. Sed accusantium et iusto.\n \rUnde neque sequi quidem beatae. Quo repudiandae voluptatem impedit nostrum asperiores nostrum aut magnam odio. At recusandae dolorem sunt debitis sequi totam esse ipsa. Eos repellendus totam aut hic.\n \rConsequatur voluptate sunt ratione est est ad omnis. Debitis animi ut est consequatur. Quos praesentium autem est minus et ea."
             }, 
             "category": {
                 "S": "Purchase"
             }, 
             "createdDateTime": {
                 "N": "1551172226477"
             }, 
             "accType": {
                 "S": "bookkeeping"
             }, 
             "vatPercent": {
                 "N": "22"
             }, 
             "accName": {
                 "S": "Computer Manat Vanuatu"
             }, 
             "vatCategoryS": {
                 "S": "P"
             }, 
             "id": {
                 "S": "d83f41e0-6d35-11ea-9d77-3dffd7d18939"
             }, 
             "accNo": {
                 "N": "66"
             }
         }, 
         {
             "category": {
                 "S": "Purchase"
             }, 
             "createdDateTime": {
                 "N": "1564661196514"
             }, 
             "accType": {
                 "S": "bookkeeping"
             }, 
             "vatPercent": {
                 "N": "88"
             }, 
             "accName": {
                 "S": "Maroon Refined Granite Tuna"
             }, 
             "vatCategoryS": {
                 "S": "P"
             }, 
             "id": {
                 "S": "d83fb710-6d35-11ea-9d77-3dffd7d18939"
             }, 
             "accNo": {
                 "N": "93"
             }
         }
     ], 
     "ScannedCount": 3, 
     "ConsumedCapacity": null
 }
 #+end_example

 Because =createdDateTime= was used as =RANGE= (sorted) key, list of items returned by this query
 sorted descendant by =createdDateTime=

***** Contractors table
****** Create table
    #+NAME: delete-contractors-table
    #+begin_src sh :results silent :eval never-export :exports both
     aws --endpoint-url http://localhost:4569 \
         dynamodb delete-table \
         --table-name Contractors
    #+end_src

    #+NAME: create-contractors-table
    #+begin_src sh :results output org :eval never-export :exports both
     aws --endpoint-url http://localhost:4569 \
         dynamodb create-table \
         --cli-input-json file://${DBPATH}/ContractorsSchema.json
    #+end_src

    #+RESULTS: create-contractors-table
    #+begin_src org
    {
        "TableDescription": {
            "TableArn": "arn:aws:dynamodb:us-east-1:000000000000:table/Contractors", 
            "AttributeDefinitions": [
                {
                    "AttributeName": "id", 
                    "AttributeType": "S"
                }, 
                {
                    "AttributeName": "createdDateTime", 
                    "AttributeType": "N"
                }
            ], 
            "ProvisionedThroughput": {
                "NumberOfDecreasesToday": 0, 
                "WriteCapacityUnits": 1, 
                "LastIncreaseDateTime": 0.0, 
                "ReadCapacityUnits": 1, 
                "LastDecreaseDateTime": 0.0
            }, 
            "TableSizeBytes": 0, 
            "TableName": "Contractors", 
            "BillingModeSummary": {
                "LastUpdateToPayPerRequestDateTime": 0.0, 
                "BillingMode": "PROVISIONED"
            }, 
            "TableStatus": "ACTIVE", 
            "KeySchema": [
                {
                    "KeyType": "HASH", 
                    "AttributeName": "id"
                }, 
                {
                    "KeyType": "RANGE", 
                    "AttributeName": "createdDateTime"
                }
            ], 
            "ItemCount": 0, 
            "CreationDateTime": 1585223192.602
        }
    }
    #+end_src

   #+begin_src sh :results output org :eval never-export :exports both
     aws --endpoint-url http://localhost:4569 \
         dynamodb list-tables
   #+end_src

   #+RESULTS:
   #+begin_src org
   {
       "TableNames": [
           "Accounts", 
           "Contractors"
       ]
   }
   #+end_src
****** Seed accounts with test data

  #NAME: seed-accounts
  #+begin_src sh :results output :eval never-export :exports both
     aws --endpoint-url http://localhost:4569 \
         dynamodb batch-write-item \
         --request-items file://${DBPATH}/ContractorsDataSeed.json
  #+end_src

  #+RESULTS:
  : {
  :     "UnprocessedItems": {}
  : }
****** Scan all items

 #NAME: scan-all-items
 #+begin_src sh :results output :eval never-export :exports both
     aws --endpoint-url http://localhost:4569 \
         dynamodb scan \
        --table-name Contractors 
 #+end_src

 #+RESULTS:
 #+begin_example json
 {
     "Count": 25, 
     "Items": [
         {
             "createdDateTime": {"N": "1472427643486"}, 
             "id": {"S": "51c19f64-6d26-11ea-b66b-eddefd31ba92"}
         }, 
         {
             "createdDateTime": {"N": "1405647608992"}, 
             "id": {"S": "51c19f5c-6d26-11ea-b66b-eddefd31ba92"}
         }, 
         ...
     ], 
     "ScannedCount": 25, 
     "ConsumedCapacity": null
 }
 #+end_example

**** [WAITING] [4/6] Attempt to create stack from cloud formation config on localstack env
     - [X] Use aws-serverless-express custom server for lambda env
     - [X] Mock aws infrastructure with localstack
     - [X] Refactor express server to be able to run it locally without deployment on lambda
     - [X] Crete cloud formation template for s3 SPA hosting
     - [ ] [Failed] Deploy express app to labmda
           lockalstack problems appear on execution cloud formation template
     - [ ] Decouple client code from beckend code 
     - [ ] API Gatewat setup

  List of cloud formation stacks
  #+NAME: end-point-list
  #+begin_src sh :results output :eval never-export :exports both
    aws --endpoint-url=http://localhost:4581 cloudformation list-stacks
  #+end_src

  #+RESULTS: end-point-list
  : /Users/vladimir/projects/react-examples/rhooks-form-app
  : {
  :     "StackSummaries": []
  : }

  #+begin_src sh :results output :eval never-export :exports both
  aws cloudformation create-stack \
      --template-body file://cloudformation.yml \
      --stack-name web-stack \
      --endpoint-url=http://localhost:4581
  #+end_src

  #+RESULTS:
  : An error occurred (502) when calling the CreateStack operation (reached max retries: 4): Bad Gateway

  Error log from docker:
  #+RESULTS:
  : local_aws     |   File "/opt/code/localstack/.venv/lib/python3.8/site-packages/moto/cloudformation/utils.py", line 61, in yaml_tag_constructor
  : local_aws     |     return {key: _f(loader, tag, node)}
  : local_aws     |   File "/opt/code/localstack/.venv/lib/python3.8/site-packages/moto/cloudformation/utils.py", line 50, in _f
  : local_aws     |     return node.value.split(".")
  : local_aws     | AttributeError: 'list' object has no attribute 'split'
*** API docs
**** Accounts
     :PROPERTIES:
     :header-args: :var API="http://localhost:5000/api"
     :END:
     All accounts tested for "bookkeeping" type
***** [C] Create account
   #+NAME: create-account 
   #+begin_src sh :results verbatim :exports both
     curl -X POST -vs "${API}/accounts?type=bookkeeping&pretty" \
          -H 'Content-Type: application/json' \
          -d '{ "accNo": 111, "category": "Purchase", "vatPercent": 11, "vatCategoryS": "P", "accName": "One one one" }'
  #+end_src

   #+RESULTS: create-account
   : {
   :   "id": "ZmI5N2NiYjAtNmY0NC0xMWVhLTg1ZDQtNWZlNTExZjNjMTJjLDE1ODUyMTUyNjU3NzE%3D",
   :   "accType": "bookkeeping",
   :   "accNo": 111,
   :   "category": "Purchase",
   :   "vatPercent": 11,
   :   "vatCategoryS": "P",
   :   "accName": "One one one"
   : }

****** Invalid request

   #+NAME: create-account-invalid
   #+begin_src sh :results verbatim :exports both
     curl -X POST -vsi "${API}/accounts?type=bookkeeping&pretty" \
          -H 'Content-Type: application/json' \
          -d '{ "category": "Purchase" }'
  #+end_src

  #+RESULTS: create-account-invalid
  #+begin_example
  HTTP/1.1 422 Unprocessable Entity
  X-Powered-By: Express
  Content-Type: application/json; charset=utf-8
  Content-Length: 130
  ETag: W/"82-HHj2rmNjH457Bv9LJ8U88iWD1J8"
  Date: Thu, 26 Mar 2020 09:34:34 GMT
  Connection: keep-alive
  
  {
    "errors": [
      {
        "msg": "account number should be number",
        "param": "accNo",
        "location": "body"
      }
    ]
  }
  #+end_example

***** [R1] Get all accounts 
    #+NAME: get-all-boo-accounts 
    #+begin_src sh :results verbatim :exports both
      curl -vsi "${API}/accounts?type=bookkeeping&pretty"
   #+end_src

   #+RESULTS: get-all-boo-accounts
   #+begin_example
   HTTP/1.1 200 OK
   X-Powered-By: Express
   Content-Type: application/json; charset=utf-8
   Content-Length: 1744
   ETag: W/"6d0-2mL5pUjB/Fv9kynH8T8rgXyF0aA"
   Date: Thu, 26 Mar 2020 09:34:43 GMT
   Connection: keep-alive
   
   {
     "items": [
       {
         "id": "ZDgzZmRlMjAtNmQzNS0xMWVhLTlkNzctM2RmZmQ3ZDE4OTM5LDEzMjkyNjI4OTIzMDQ%3D",
         "vatCategoryS": "P",
         "accNo": 93,
         "accName": "Agp",
         "comment": "est autem facere",
         "category": "Purchase",
         "accType": "bookkeeping",
         "vatPercent": 73
       },
       {
         "id": "ZDgzZjQxZTAtNmQzNS0xMWVhLTlkNzctM2RmZmQ3ZDE4OTM5LDE1NTExNzIyMjY0Nzc%3D",
         "vatCategoryS": "P",
         "accNo": 66,
         "accName": "Computer Manat Vanuatu",
         "comment": "Amet consequatur similique quis nobis nam maxime ut dolor. Vitae sed quo sunt molestias vero tempore minima. Necessitatibus ducimus hic reprehenderit. Hic dolore error animi ut aperiam. Hic inventore sunt ipsa ut recusandae. Sed accusantium et iusto.\n \rUnde neque sequi quidem beatae. Quo repudiandae voluptatem impedit nostrum asperiores nostrum aut magnam odio. At recusandae dolorem sunt debitis sequi totam esse ipsa. Eos repellendus totam aut hic.\n \rConsequatur voluptate sunt ratione est est ad omnis. Debitis animi ut est consequatur. Quos praesentium autem est minus et ea.",
         "category": "Purchase",
         "accType": "bookkeeping",
         "vatPercent": 22
       },
       {
         "id": "ZDgzZmI3MTAtNmQzNS0xMWVhLTlkNzctM2RmZmQ3ZDE4OTM5LDE1NjQ2NjExOTY1MTQ%3D",
         "vatCategoryS": "P",
         "accNo": 93,
         "accName": "Maroon Refined Granite Tuna",
         "category": "Purchase",
         "accType": "bookkeeping",
         "vatPercent": 88
       },
       {
         "id": "ZmI5N2NiYjAtNmY0NC0xMWVhLTg1ZDQtNWZlNTExZjNjMTJjLDE1ODUyMTUyNjU3NzE%3D",
         "vatCategoryS": "P",
         "accNo": 111,
         "accName": "One one one",
         "accType": "bookkeeping",
         "category": "Purchase",
         "vatPercent": 11
       }
     ],
     "count": 4
   }
   #+end_example

***** [R2] Get single account  
    #+NAME: get-one-boo-accounts 
    #+begin_src sh :results verbatim :exports both
      curl -vsi "${API}/accounts/ZDgzZWYzYzAtNmQzNS0xMWVhLTlkNzctM2RmZmQ3ZDE4OTM5LDE0NDY5NjA5MzQwMjU%3D/?pretty"
   #+end_src

   #+RESULTS: get-one-boo-accounts
   #+begin_example
   HTTP/1.1 200 OK
   X-Powered-By: Express
   Content-Type: application/json; charset=utf-8
   Content-Length: 275
   ETag: W/"113-8G/9TPw6G+iF1N4VS0htAw7+rJ8"
   Date: Thu, 26 Mar 2020 09:46:09 GMT
   Connection: keep-alive
   
   {
     "id": "ZDgzZWYzYzAtNmQzNS0xMWVhLTlkNzctM2RmZmQ3ZDE4OTM5LDE0NDY5NjA5MzQwMjU%3D",
     "vatCategoryS": "S",
     "accNo": 55,
     "accName": "Roi Greens Backing Up",
     "comment": "Facere deleniti blanditiis eum.",
     "category": "Sales",
     "accType": "default",
     "vatPercent": 49
   }
   #+end_example
***** [U] Update account
   #+NAME: update-account 
   #+begin_src sh :results verbatim :exports both
     curl -X PUT -vs "${API}/accounts/ZDgzZWYzYzAtNmQzNS0xMWVhLTlkNzctM2RmZmQ3ZDE4OTM5LDE0NDY5NjA5MzQwMjU%3D/?pretty" \
          -H 'Content-Type: application/json' \
          -d '{ "vatPercent": 111, "accName": "One One One" }'
  #+end_src

  #+RESULTS: update-account
  #+begin_example
  {
    "id": "ZDgzZWYzYzAtNmQzNS0xMWVhLTlkNzctM2RmZmQ3ZDE4OTM5LDE0NDY5NjA5MzQwMjU%3D",
    "vatCategoryS": "S",
    "accNo": 55,
    "accName": "One One One",
    "comment": "Facere deleniti blanditiis eum.",
    "category": "Sales",
    "accType": "default",
    "vatPercent": 111
  }
  #+end_example

****** Invalid request

   #+NAME: update-account-invalid 
   #+begin_src sh :results verbatim :exports both
     curl -X PUT -vs "${API}/accounts/?type=bookkeeping&pretty" \
          -H 'Content-Type: application/json' \
          -d '{ "vatPercent": 111, "accName": "One One One" }'
  #+end_src

  #+RESULTS: update-account-invalid
  #+begin_example
  <!DOCTYPE html>
  <html lang="en">
  <head>
  <meta charset="utf-8">
  <title>Error</title>
  </head>
  <body>
  <pre>Cannot PUT /api/accounts/</pre>
  </body>
  </html>
  #+end_example

***** [D] Delete account
   #+NAME: delete-account 
   #+begin_src sh :results verbatim :exports both
     curl -X DELETE -vs "${API}/accounts/ZDgzZWYzYzAtNmQzNS0xMWVhLTlkNzctM2RmZmQ3ZDE4OTM5LDE0NDY5NjA5MzQwMjU%3D/?pretty"
  #+end_src

  #+RESULTS: delete-account


  

