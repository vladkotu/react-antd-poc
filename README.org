
* Proof of qualification repo
  This project aim to proof knowledge of NodeJs/React stack
** Start Scripts
   See [[file:package.json][server package.json]] and [[file:client/package.json][client package.json]] "scripts" sections for details.

#+begin_src sh
yarn dev:all
#+end_src

Starts server modemon as well as client React app in development/watch mode.

#+begin_src sh
yarn nodemon
#+end_src

Executes server side code watcher in dev mode.
** React(Hooks) front-end
*** TODO [6/9] List:
    1. [X] Use React Hooks for state management
    2. [X] Use [[https://ant.design/components/button/][Ant Design]]  components library
    3. [X] Implement reusable Editable list component for admin dashboard
    4. [ ] Sass styling
    5. [X] Mock api calls while developing
    6. [ ] Integrate BE API
    7. [X] Mock api data with faker.js
    8. [X] Unit tests
    9. [ ] Functional tests
 
** NodeJs backend
*** TODO [4/8] List
    - [X] CRUD actions
    - [X] ES6 syntax
    - [X] Request validation/sanitation
      - [X] Single route validation
      - [X] Custom validation middleware
    - [X] Error handling
    - [ ] Unit tests
    - [ ] Functional API tests
    - [ ] Deploy to AWS (localstack)
    - [ ] DynamoDB

*** API docs
**** Accounts
     :PROPERTIES:
     :header-args: :var API="http://localhost:5000/api"
     :END:
     All accounts tested for "bookkeeping" type
***** [C] Create account
   #+NAME: create-account 
   #+begin_src sh :results verbatim :exports both
     curl -X POST -vs "${API}/accounts?type=bookkeeping&pretty" \
          -H 'Content-Type: application/json' \
          -d '{ "accNo": 111, "category": "Purchase", "vatPercent": 11, "vatCategoryS": "P", "accName": "One one one" }'
  #+end_src

   #+RESULTS: create-account
   : {
   :   "accNo": 111,
   :   "category": "Purchase",
   :   "vatPercent": 11,
   :   "vatCategoryS": "P",
   :   "accName": "One one one",
   :   "id": 968
   : }

****** Invalid request

   #+NAME: create-account-invalid
   #+begin_src sh :results verbatim :exports both
     curl -X POST -vsi "${API}/accounts?type=bookkeeping&pretty" \
          -H 'Content-Type: application/json' \
          -d '{ "category": "Purchase" }'
  #+end_src

  #+RESULTS: create-account-invalid
  #+begin_example
  HTTP/1.1 422 Unprocessable Entity
  X-Powered-By: Express
  Content-Type: application/json; charset=utf-8
  Content-Length: 130
  ETag: W/"82-HHj2rmNjH457Bv9LJ8U88iWD1J8"
  Date: Thu, 19 Mar 2020 16:39:11 GMT
  Connection: keep-alive
 
  {
    "errors": [
      {
        "msg": "account number should be number",
        "param": "accNo",
        "location": "body"
      }
    ]
  }
  #+end_example

***** [R1] Get all accounts 
    #+NAME: get-all-boo-accounts 
    #+begin_src sh :results verbatim :exports both
      curl -vsi "${API}/accounts?type=bookkeeping&pretty&limit=2"
   #+end_src

   #+RESULTS: get-all-boo-accounts
   #+begin_example
   HTTP/1.1 200 OK
   X-Powered-By: Express
   Content-Type: application/json; charset=utf-8
   Content-Length: 462
   ETag: W/"1ce-53pljYKpmW/QIkcNvkL9YUeiaDw"
   Date: Thu, 19 Mar 2020 15:30:04 GMT
   Connection: keep-alive
  
   {
     "count": 6,
     "limit": "2",
     "items": [
       {
         "accNo": 111,
         "category": "Purchase",
         "vatPercent": 111,
         "vatCategoryS": "P",
         "accName": "One One One",
         "id": 968
       },
       {
         "id": 15,
         "accNo": 98,
         "category": "Sales",
         "vatPercent": 55,
         "vatCategoryS": "S",
         "accName": "Senior generate calculate",
         "extRevenuClass": null,
         "extTaxCode": null,
         "comment": null
       }
     ]
   }
   #+end_example

***** [R2] Get single account  
    #+NAME: get-one-boo-accounts 
    #+begin_src sh :results verbatim :exports both
      curl -vsi "${API}/accounts/968/?type=bookkeeping&pretty"
   #+end_src

   #+RESULTS: get-one-boo-accounts
   #+begin_example
   HTTP/1.1 200 OK
   X-Powered-By: Express
   Content-Type: application/json; charset=utf-8
   Content-Length: 128
   ETag: W/"80-/zcS/dOXmo/QZGY78nkBimKf6d4"
   Date: Thu, 19 Mar 2020 15:23:48 GMT
   Connection: keep-alive
  
   {
     "accNo": 111,
     "category": "Purchase",
     "vatPercent": 11,
     "vatCategoryS": "P",
     "accName": "One one one",
     "id": 968
   }
   #+end_example

***** [U] Update account
   #+NAME: update-account 
   #+begin_src sh :results verbatim :exports both
     curl -X PUT -vs "${API}/accounts/968/?type=bookkeeping&pretty" \
          -H 'Content-Type: application/json' \
          -d '{ "vatPercent": 111, "accName": "One One One" }'
  #+end_src

  #+RESULTS: update-account
  : {
  :   "accNo": 111,
  :   "category": "Purchase",
  :   "vatPercent": 111,
  :   "vatCategoryS": "P",
  :   "accName": "One One One",
  :   "id": 968
  : }

****** Invalid request

   #+NAME: update-account-invalid 
   #+begin_src sh :results verbatim :exports both
     curl -X PUT -vs "${API}/accounts/?type=bookkeeping&pretty" \
          -H 'Content-Type: application/json' \
          -d '{ "vatPercent": 111, "accName": "One One One" }'
  #+end_src

  #+RESULTS: update-account-invalid
  #+begin_example
  <!DOCTYPE html>
  <html lang="en">
  <head>
  <meta charset="utf-8">
  <title>Error</title>
  </head>
  <body>
  <pre>Cannot PUT /api/accounts/</pre>
  </body>
  </html>
  #+end_example

***** [D] Delete account
   #+NAME: delete-account 
   #+begin_src sh :results verbatim :exports both
     curl -X DELETE -vs "${API}/accounts/968/?type=bookkeeping&pretty"
  #+end_src

  #+RESULTS: delete-account
  : {
  :   "ok": true
  : }

  

** aws scripts

   
*** DynamoDB
**** Design table keys
     - What attr should be partition(hash?) key for accounts and contractors?
       partition key is dimension of scalability, distributes aggregates (items by identity?)
       across partitions (horizontal scaling)

       It's typical use case - direct item lookup by id

       1->many: combination of partition and sort keys(this should stay unique across table)
       Example: deviceId (P) and recordedTime in epoch (s)

     - What attr should be sorted(range?) key for accounts and contractors?
     - How to lookup by account type?
     - How to generate identity values? DDB  does it automatically? should node.uuid be used?

**** Manage DynamoDB from cli
***** Create accounts table
      Generate json shema for DynamoDB table:
   #+begin_src sh :results output :eval never-export :exports both
     aws dynamodb create-table --generate-cli-skeleton > ./db/table-shema.json
   #+end_src

   #+NAME: delete-table
   #+begin_src sh :results silent :eval never-export :exports both
    aws --endpoint-url http://localhost:4569 \
        dynamodb delete-table \
        --table-name Accounts
   #+end_src


   #+NAME: create-table
   #+begin_src sh :results output org :eval never-export :exports both
    aws --endpoint-url http://localhost:4569 \
        dynamodb create-table \
        --cli-input-json file://db/accounts.json
   #+end_src

   #+RESULTS: create-table
   #+begin_src org
   {
       "TableDescription": {
           "TableArn": "arn:aws:dynamodb:us-east-1:000000000000:table/Accounts", 
           "AttributeDefinitions": [
               {
                   "AttributeName": "id", 
                   "AttributeType": "S"
               }, 
               {
                   "AttributeName": "accType", 
                   "AttributeType": "S"
               }, 
               {
                   "AttributeName": "createdDateTime", 
                   "AttributeType": "N"
               }
           ], 
           "GlobalSecondaryIndexes": [
               {
                   "IndexSizeBytes": 0, 
                   "IndexName": "accType", 
                   "Projection": {
                       "ProjectionType": "ALL"
                   }, 
                   "ProvisionedThroughput": {
                       "WriteCapacityUnits": 1, 
                       "ReadCapacityUnits": 1
                   }, 
                   "IndexStatus": "ACTIVE", 
                   "KeySchema": [
                       {
                           "KeyType": "HASH", 
                           "AttributeName": "accType"
                       }, 
                       {
                           "KeyType": "RANGE", 
                           "AttributeName": "createdDateTime"
                       }
                   ], 
                   "IndexArn": "arn:aws:dynamodb:ddblocal:000000000000:table/Accounts/index/accType", 
                   "ItemCount": 0
               }
           ], 
           "ProvisionedThroughput": {
               "NumberOfDecreasesToday": 0, 
               "WriteCapacityUnits": 1, 
               "LastIncreaseDateTime": 0.0, 
               "ReadCapacityUnits": 1, 
               "LastDecreaseDateTime": 0.0
           }, 
           "TableSizeBytes": 0, 
           "TableName": "Accounts", 
           "BillingModeSummary": {
               "LastUpdateToPayPerRequestDateTime": 0.0, 
               "BillingMode": "PROVISIONED"
           }, 
           "TableStatus": "ACTIVE", 
           "KeySchema": [
               {
                   "KeyType": "HASH", 
                   "AttributeName": "id"
               }, 
               {
                   "KeyType": "RANGE", 
                   "AttributeName": "createdDateTime"
               }
           ], 
           "ItemCount": 0, 
           "CreationDateTime": 1584959727.959
       }
   }
   #+end_src

  #+begin_src sh :results output org :eval never-export :exports both
    aws --endpoint-url http://localhost:4569 \
        dynamodb list-tables
  #+end_src

  #+RESULTS:
  #+begin_src org
  {
      "TableNames": [
          "Accounts"
      ]
  }
  #+end_src

***** Seed accounts with test data

 #NAME: seed-accounts
 #+begin_src sh :results output :eval never-export :exports both
    aws --endpoint-url http://localhost:4569 \
        dynamodb batch-write-item \
        --request-items   \
        file://db/accounts-seed.json
 #+end_src

 #+RESULTS:
 : {
 :     "UnprocessedItems": {}
 : }

**** [Failed] [4/6] Attempt to create stack from cloud formation config on localstack env
     - [X] Use aws-serverless-express custom server for lambda env
     - [X] Mock aws infrastructure locally, using lockalstack
     - [X] Refactor express server to be able to run it locally without deployment on lambda
     - [X] Crete cloud formation template for s3 SPA hosting
     - [ ] [Failed] Deploy express app to labmda
           lockalstack problems appear on execution cloud formation template
     - [ ] Decouple client code from beckend code 
     - [ ] API Gatewat setup

    
  List of cloud formation stacks
  #+NAME: end-point-list
  #+begin_src sh :results output :eval never-export :exports both
    aws --endpoint-url=http://localhost:4581 cloudformation list-stacks
  #+end_src

  #+RESULTS: end-point-list
  : /Users/vladimir/projects/react-examples/rhooks-form-app
  : {
  :     "StackSummaries": []
  : }

  #+begin_src sh :results output :eval never-export :exports both
  aws cloudformation create-stack \
      --template-body file://cloudformation.yml \
      --stack-name web-stack \
      --endpoint-url=http://localhost:4581
  #+end_src

  #+RESULTS:
  : An error occurred (502) when calling the CreateStack operation (reached max retries: 4): Bad Gateway

  Error log from docker:
  #+RESULTS:
  : local_aws     |   File "/opt/code/localstack/.venv/lib/python3.8/site-packages/moto/cloudformation/utils.py", line 61, in yaml_tag_constructor
  : local_aws     |     return {key: _f(loader, tag, node)}
  : local_aws     |   File "/opt/code/localstack/.venv/lib/python3.8/site-packages/moto/cloudformation/utils.py", line 50, in _f
  : local_aws     |     return node.value.split(".")
  : local_aws     | AttributeError: 'list' object has no attribute 'split'
